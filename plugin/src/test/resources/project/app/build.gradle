plugins {
    id "java-library"
    id "works-publish"
}

repositories {
    google()
    jcenter()
    mavenCentral()
}

apply plugin: "works-publish"
apply plugin: "jacoco"
apply plugin: "pmd"

version "1.0.0"


HashSet<String> stepIn(Project project, ResolvedDependency root) {
    def dependencies = new HashSet<String>()

    def id = root.module.id
    def key = "${id.group}:${id.module.name}:${id.version}"

    dependencies.add(key)
    root.children.forEach {
        dependencies.addAll(stepIn(project, it))
    }

    return dependencies
}

task parallelTest(type: Test) {
    maxParallelForks = 2
}

task silentJacocoTestReport(type: JacocoReport, dependsOn: "test") {
    reports {
        xml.enabled = false
        html.enabled = false
    }

    // generated classes
    classDirectories = fileTree(
            dir: "$buildDir/classes/java/main",
    )

    // sources
    sourceDirectories = files("src/main/java")
    executionData = files("$buildDir/jacoco/silent.exec")
}

task developerJacocoTestReport(type: JacocoReport, dependsOn: "test") {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    // generated classes
    classDirectories = fileTree(
            dir: "$buildDir/classes/java/main",
    )

    // sources
    sourceDirectories = files("src/main/java")
    executionData = files("$buildDir/jacoco/test.exec")
}

task anotherSilentJacocoTestReport(type: JacocoReport, dependsOn: "test") {
    reports {
        xml.enabled = false
        html.enabled = false
    }

    // generated classes
    classDirectories = fileTree(
            dir: "$buildDir/classes/java/main",
    )

    // sources
    sourceDirectories = files("src/main/java")
    executionData = files("$buildDir/jacoco/anotherSilent.exec")
}

task worksPrintDependencies() {
    doLast {
        def dependencies = new HashSet<String>()
        def resolved = project.configurations.collectMany(dependencies) { configuration ->
            if (configuration.canBeResolved) {
                ResolvedConfiguration resolvedConfiguration = configuration.resolvedConfiguration
                resolvedConfiguration.firstLevelModuleDependencies.collectMany {
                    stepIn(project, it)
                }
            } else {
                return new HashSet<String>()
            }
        }

        def get = project.properties.get("depOutput")
        if (get != null) {
            new File(project.rootDir, get.toString())
                    .write(resolved.join(System.lineSeparator()))
        } else {
            resolved.each {
                println(it)
            }
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.4'

    api 'io.reactivex.rxjava2:rxjava:2.1.14'
    api 'junit:junit:4.4'
    implementation 'junit:junit-dep:4.4'
}